const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class FullGridPositioningAnalyzer {
    constructor() {
        this.server = null;
    }

    async startServer() {
        console.log('üöÄ Starting server for FullGrid positioning analysis...');
        return new Promise((resolve, reject) => {
            this.server = spawn('node', ['server.js'], { 
                stdio: 'pipe',
                cwd: path.join(__dirname, '..')
            });
            
            this.server.stdout.on('data', (data) => {
                if (data.toString().includes('Server running at')) {
                    console.log('‚úÖ Server ready for analysis');
                    resolve();
                }
            });
            
            this.server.stderr.on('data', (data) => {
                console.error('Server error:', data.toString());
            });
            
            setTimeout(() => {
                reject(new Error('Server failed to start'));
            }, 10000);
        });
    }

    analyzeFullGridPositioning() {
        console.log('üîç Analyzing FullGrid card positioning...');
        
        // From CSS analysis, I can see the issue:
        const analysis = {
            problem: "Cards are positioned absolutely but have NO initial positioning coordinates",
            currentState: {
                positioning: "position: absolute",
                coordinates: "NO top, left, right, or bottom values set",
                zIndex: "z-index: 10 (all cards same level)",
                sizes: {
                    small: { width: 120, height: 80 },
                    medium: { width: 160, height: 100 },
                    large: { width: 200, height: 120 },
                    xlarge: { width: 240, height: 140 }
                }
            },
            issues: [
                "‚ùå Cards have position: absolute but no coordinates",
                "‚ùå All cards stack on top of each other at (0,0)",
                "‚ùå No random positioning logic in CSS",
                "‚ùå No overlap management system",
                "‚ùå Cards will completely overlap, not just slightly"
            ],
            recommendations: [
                "‚úÖ Add JavaScript positioning logic to place cards randomly",
                "‚úÖ Implement collision detection to prevent excessive overlap",
                "‚úÖ Add slight random offsets for organic feel",
                "‚úÖ Use z-index variation for layering",
                "‚úÖ Consider using CSS Grid or Flexbox with random positioning"
            ]
        };
        
        return analysis;
    }

    generatePositioningSolution() {
        console.log('üí° Generating positioning solution...');
        
        const solution = {
            approach: "JavaScript-based random positioning with overlap control",
            implementation: {
                step1: "Add random positioning function in JavaScript",
                step2: "Calculate available space in viewport",
                step3: "Place cards with slight random offsets",
                step4: "Implement basic collision detection",
                step5: "Add z-index variation for layering"
            },
            codeExample: `
// Add this to the renderSection function in index.html
function positionCardRandomly(card, index) {
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    
    // Get card size
    const sizeClass = card.classList.contains('small') ? 'small' : 
                     card.classList.contains('medium') ? 'medium' :
                     card.classList.contains('large') ? 'large' : 'xlarge';
    
    const sizes = {
        small: { width: 120, height: 80 },
        medium: { width: 160, height: 100 },
        large: { width: 200, height: 120 },
        xlarge: { width: 240, height: 140 }
    };
    
    const cardSize = sizes[sizeClass];
    
    // Random position with some constraints
    const maxX = Math.max(0, viewportWidth - cardSize.width);
    const maxY = Math.max(0, viewportHeight - cardSize.height);
    
    const x = Math.random() * maxX;
    const y = Math.random() * maxY;
    
    // Add slight random offset for organic feel
    const offsetX = (Math.random() - 0.5) * 20; // -10 to +10
    const offsetY = (Math.random() - 0.5) * 20; // -10 to +10
    
    card.style.left = (x + offsetX) + 'px';
    card.style.top = (y + offsetY) + 'px';
    card.style.zIndex = 10 + Math.floor(Math.random() * 5); // 10-14
}
            `,
            cssUpdates: `
/* Add to FullGrid card styles */
body.fullgrid-style .card {
    position: absolute;
    /* Remove fixed positioning, let JS handle it */
    transition: all 0.4s ease;
    z-index: 10;
}

/* Add hover effects for better overlap indication */
body.fullgrid-style .card:hover {
    z-index: 20 !important;
    transform: translateZ(20px) scale(1.05);
}
            `
        };
        
        return solution;
    }

    async runAnalysis() {
        console.log('üéØ FullGrid Positioning Analysis');
        console.log('================================');
        
        try {
            await this.startServer();
            
            const analysis = this.analyzeFullGridPositioning();
            const solution = this.generatePositioningSolution();
            
            console.log('\nüìä Current State Analysis:');
            console.log('==========================');
            console.log(`Positioning: ${analysis.currentState.positioning}`);
            console.log(`Coordinates: ${analysis.currentState.coordinates}`);
            console.log(`Z-Index: ${analysis.currentState.zIndex}`);
            console.log(`Card Sizes: ${Object.keys(analysis.currentState.sizes).length} variants`);
            
            console.log('\n‚ùå Identified Issues:');
            analysis.issues.forEach(issue => console.log(`  ${issue}`));
            
            console.log('\nüí° Recommended Solutions:');
            analysis.recommendations.forEach(rec => console.log(`  ${rec}`));
            
            console.log('\nüîß Implementation Approach:');
            console.log(`Approach: ${solution.approach}`);
            console.log('\nSteps:');
            Object.entries(solution.implementation).forEach(([key, value]) => {
                console.log(`  ${key}: ${value}`);
            });
            
            // Save detailed analysis
            const report = {
                timestamp: new Date().toISOString(),
                analysis,
                solution,
                conclusion: "FullGrid cards currently have no positioning logic, causing complete overlap. Need JavaScript-based random positioning with collision detection."
            };
            
            const reportPath = path.join(__dirname, '..', 'verification-screenshots', 'fullgrid-positioning-analysis.json');
            const reportDir = path.dirname(reportPath);
            if (!fs.existsSync(reportDir)) {
                fs.mkdirSync(reportDir, { recursive: true });
            }
            fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
            console.log(`\nüìÑ Detailed analysis saved: ${reportPath}`);
            
        } catch (error) {
            console.error('‚ùå Analysis failed:', error.message);
        } finally {
            await this.cleanup();
        }
    }

    async cleanup() {
        if (this.server) {
            this.server.kill();
            console.log('üîí Server stopped');
        }
    }
}

// Run analysis if called directly
if (require.main === module) {
    const analyzer = new FullGridPositioningAnalyzer();
    analyzer.runAnalysis().catch(console.error);
}

module.exports = FullGridPositioningAnalyzer;


